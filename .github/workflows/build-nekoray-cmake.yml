name: Nekoray build matrix - cmake

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release Tag"
        required: true
      publish:
        description: "Publish: If want ignore"
        required: false
      artifact-pack:
        description: "artifact-pack: If want ignore"
        required: false

jobs:


  build-go:
    strategy:
      matrix:
        cross_os: [windows]
        cross_arch: [arm64]
        include:
          - cross_os: public_res
            cross_arch: public_res
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checking out sources
        uses: actions/checkout@v3
        
      - name: Go Status
        run: git ls-files go | xargs cat | sha1sum > go_status
        
      - name: Cache Common Download
        id: cache-common
        uses: actions/cache@v3
        with:
          path: artifacts.tgz
          key: CommonCache-${{ matrix.cross_os }}-${{ matrix.cross_arch }}-${{ hashFiles('libs/*.sh', 'go_status', '*.txt') }}
      
      - name: Install Golang
        if: steps.cache-common.outputs.cache-hit != 'true'
        uses: actions/setup-go@v3
        with:
          go-version: ^1.22
          
      - name: Build golang parts
        if: steps.cache-common.outputs.cache-hit != 'true'
        shell: bash
        run: |
          [ ${{ matrix.cross_os }} == public_res ] || ./libs/get_source.sh
          [ ${{ matrix.cross_os }} == public_res ] || GOOS=${{ matrix.cross_os }} GOARCH=${{ matrix.cross_arch }} ./libs/build_go.sh
          [ ${{ matrix.cross_os }} == public_res ] || exit 0
          ./libs/build_public_res.sh
          
      - name: Tar files
        if: steps.cache-common.outputs.cache-hit != 'true'
        run: tar czvf artifacts.tgz ./deployment
        
      - name: Uploading Artifact
        uses: actions/upload-artifact@v3
        with:
          name: NekoRay-${{ github.sha }}-Common-${{ matrix.cross_os }}-${{ matrix.cross_arch }}
          path: artifacts.tgz





  build-cpp:
    strategy:
      matrix:
        include:
          - platform: windows-2022
            arch: arm64
            qt_version: "6.7"
      fail-fast: false

    runs-on: ${{ matrix.platform }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - name: Checking out sources
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          
      - name: Install MSVC compiler
        if: matrix.platform == 'windows-2022'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.2
          arch: ${{ matrix.arch }}
          
      - name: Windows - Download Custom Qt ${{ matrix.qt_version }} SDK
        shell: bash
        if: matrix.platform == 'windows-2022'
        env:
          DL_QT_VER: ${{ matrix.qt_version }}
          QT_ARCH: ${{ matrix.arch }}
        run: bash ./libs/download_qtsdk_win.sh
        
      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v3
        
      - name: Cache Download
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: libs/deps
          key: DepsCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ hashFiles('libs/build_deps_*.sh') }}-Qt${{ matrix.qt_version }}
      
      - name: Build Dependencies
        shell: bash
        if: steps.cache-deps.outputs.cache-hit != 'true' && matrix.platform != 'ubuntu-20.04'
        run: ./libs/build_deps_all.sh
        
      - name: Build Dependencies (Docker)
        shell: bash
        if: steps.cache-deps.outputs.cache-hit != 'true' && matrix.platform == 'ubuntu-20.04'
        run: |
          docker run --rm \
            -v $PWD:/nekoray \
            -w /nekoray \
            ghcr.io/matsuridayo/debian10-qt5:20230131 \
            bash -c "./libs/build_deps_all.sh"
            
      - name: Windows - Generate MakeFile and Build
        shell: bash
        if: matrix.platform == 'windows-2022' && matrix.arch == 'x64'
        env:
          DL_QT_VER: ${{ matrix.qt_version }}
          CC: cl.exe
          CXX: cl.exe
        run: |
          source libs/env_qtsdk.sh $PWD/qtsdk/Qt
          mkdir build
          cd build
          cmake -GNinja -DQT_VERSION_MAJOR=6 -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
            ..
          ninja -j2
          cd ..
          ./libs/deploy_windows64.sh
          
      - name: Windows - Generate MakeFile and Build (ARM64)
        shell: bash
        if: matrix.platform == 'windows-2022' && matrix.arch == 'arm64'
        env:
          DL_QT_VER: ${{ matrix.qt_version }}
          CC: cl.exe
          CXX: cl.exe
        run: |
          source libs/env_qtsdk.sh $PWD/qtsdk/Qt
          mkdir build
          cd build
          cmake -GNinja -DQT_VERSION_MAJOR=6 -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
            ..
          ninja -j2
          cd ..
          ./libs/deploy_windows_arm64.sh
          
      - name: Linux - Generate MakeFile and Build
        shell: bash
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          docker run --rm \
            -v $PWD:/nekoray \
            -w /nekoray \
            ghcr.io/matsuridayo/debian10-qt5:20230131 \
            bash -c "mkdir build && pushd build && cmake -GNinja -DCMAKE_BUILD_TYPE=Release .. && ninja && popd && ./libs/deploy_linux64.sh"
      
      - name: Tar files
        shell: bash
        run: tar czvf artifacts.tgz ./deployment
        
      - name: Uploading Artifact
        uses: actions/upload-artifact@v3
        with:
          name: NekoRay-${{ github.sha }}-${{ matrix.platform }}-${{ matrix.arch }}-Qt${{ matrix.qt_version }}
          path: artifacts.tgz

  publish:
    name: Pack & Publish Release
    if: github.event.inputs.artifact-pack != 'y'
    runs-on: ubuntu-latest
    needs:
      - build-cpp
      - build-go
    steps:
      - name: Checking out sources
        uses: actions/checkout@v3
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: download-artifact
      - name: Pack
        run: |
          source libs/env_deploy.sh
          find . -name artifacts.tgz | xargs -n1 tar xvzf
          cp -r public_res/* linux64
          cp -r public_res/* windows64
          cp -r public_res/* windows_arm64
          rm -rf public_res
          zip -r artifacts.zip ./deployment
